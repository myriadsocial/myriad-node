name: Main automation

on:
  push:
    branches:
      - main

concurrency:
  group: main-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

  build-and-upload-artifacts:
    runs-on: ubuntu-20.04
    needs: compute-build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-06-29
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          override: true
          default: true
      - name: Cache rust or cargo project
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Cargo build
        run: cargo build --release
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: main
          path: |
            ./target/release/wbuild/myriad-runtime/myriad_runtime.compact.compressed.wasm
            ./target/release/wbuild/myriad-runtime/myriad_runtime.compact.wasm
            ./target/release/wbuild/myriad-runtime/myriad_runtime.wasm
            ./target/release/myriad

  build-and-publish-docker-image:
    runs-on: ubuntu-20.04
    needs: [compute-build-info, build-and-upload-artifacts]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Re-use cache rust or cargo project
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Copy binnary file
        run: cp target/release/myriad .
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: .maintain/docker/injected-binnary.Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.compute-build-info.outputs.sha_short }}-${{ needs.compute-build-info.outputs.date }}
            ${{ github.repository }}:latest-alpha
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-20.04
    needs: [compute-build-info, build-and-publish-docker-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.DEV_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.DEV_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: myriad
          location: asia-southeast2-a
      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            NODE_KEY_PRIVATE_1:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_1
            NODE_KEY_PUBLIC_1:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_1
            NODE_KEY_PRIVATE_2:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_2
            NODE_KEY_PUBLIC_2:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_2
            NODE_KEY_PRIVATE_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_VALIDATOR_1
            NODE_KEY_PUBLIC_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_VALIDATOR_1
            NODE_KEY_PRIVATE_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_VALIDATOR_2
            NODE_KEY_PUBLIC_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_VALIDATOR_2
            SESSION_KEY_SEED_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_SEED_VALIDATOR_1
            SESSION_KEY_GRANDPA_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_GRANDPA_VALIDATOR_1
            SESSION_KEY_BABE_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_BABE_VALIDATOR_1
            SESSION_KEY_IMONLINE_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_IMONLINE_VALIDATOR_1
            SESSION_KEY_BEEFY_VALIDATOR_1:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_BEEFY_VALIDATOR_1
            SESSION_KEY_SEED_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_SEED_VALIDATOR_2
            SESSION_KEY_GRANDPA_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_GRANDPA_VALIDATOR_2
            SESSION_KEY_BABE_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_BABE_VALIDATOR_2
            SESSION_KEY_IMONLINE_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_IMONLINE_VALIDATOR_2
            SESSION_KEY_BEEFY_VALIDATOR_2:${{ secrets.DEV_GCP_PROJECT_ID }}/SESSION_KEY_BEEFY_VALIDATOR_2
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - name: Deploy
        run: |
          helm upgrade myriad-node .maintain/kubernetes \
            --install \
            --set-string image.tag=${{ needs.compute-build-info.outputs.sha_short }}-${{ needs.compute-build-info.outputs.date }} \
            --set-string config.chain=development \
            --set-string config.nodes[0].name=full1 \
            --set config.nodes[0].bootnode=true \
            --set config.nodes[0].validator=false \
            --set-string config.nodes[0].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_1 }} \
            --set-string config.nodes[0].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_1 }} \
            --set config.nodes[0].sessionInjectionEnabled=false \
            --set-string config.nodes[1].name=full2 \
            --set config.nodes[1].bootnode=true \
            --set config.nodes[1].validator=false \
            --set-string config.nodes[1].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_2 }} \
            --set-string config.nodes[1].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_2 }} \
            --set config.nodes[1].sessionInjectionEnabled=false \
            --set-string config.nodes[2].name=validator1 \
            --set config.nodes[2].bootnode=true \
            --set config.nodes[2].validator=true \
            --set-string config.nodes[2].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_VALIDATOR_1 }} \
            --set-string config.nodes[2].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_VALIDATOR_1 }} \
            --set config.nodes[2].sessionInjectionEnabled=true \
            --set-string config.nodes[2].sessionKeys.keySeed="${{ steps.secrets.outputs.SESSION_KEY_SEED_VALIDATOR_1 }}" \
            --set-string config.nodes[2].sessionKeys.grandpa=${{ steps.secrets.outputs.SESSION_KEY_GRANDPA_VALIDATOR_1 }} \
            --set-string config.nodes[2].sessionKeys.babe=${{ steps.secrets.outputs.SESSION_KEY_BABE_VALIDATOR_1 }} \
            --set-string config.nodes[2].sessionKeys.imonline=${{ steps.secrets.outputs.SESSION_KEY_IMONLINE_VALIDATOR_1 }} \
            --set-string config.nodes[2].sessionKeys.beefy=${{ steps.secrets.outputs.SESSION_KEY_BEEFY_VALIDATOR_1 }} \
            --set-string config.nodes[3].name=validator2 \
            --set config.nodes[3].bootnode=true \
            --set config.nodes[3].validator=true \
            --set-string config.nodes[3].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_VALIDATOR_2 }} \
            --set-string config.nodes[3].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_VALIDATOR_2 }} \
            --set config.nodes[3].sessionInjectionEnabled=true \
            --set-string config.nodes[3].sessionKeys.keySeed="${{ steps.secrets.outputs.SESSION_KEY_SEED_VALIDATOR_2 }}" \
            --set-string config.nodes[3].sessionKeys.grandpa=${{ steps.secrets.outputs.SESSION_KEY_GRANDPA_VALIDATOR_2 }} \
            --set-string config.nodes[3].sessionKeys.babe=${{ steps.secrets.outputs.SESSION_KEY_BABE_VALIDATOR_2 }} \
            --set-string config.nodes[3].sessionKeys.imonline=${{ steps.secrets.outputs.SESSION_KEY_IMONLINE_VALIDATOR_2 }} \
            --set-string config.nodes[3].sessionKeys.beefy=${{ steps.secrets.outputs.SESSION_KEY_BEEFY_VALIDATOR_2 }} \
            --set services.httpRPC.enabled=true \
            --set services.websocketRPC.enabled=true \
            --set ingress.httpRPC.enabled=true \
            --set-string ingress.httpRPC.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set-string ingress.httpRPC.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
            --set-string ingress.httpRPC.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
            --set-string ingress.httpRPC.hosts[0].host=http-rpc.dev.myriad.systems \
            --set-string ingress.httpRPC.hosts[0].paths[0].path=/ \
            --set-string ingress.httpRPC.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set-string ingress.httpRPC.tls[0].secretName=myriad-node-http-rpc-tls \
            --set-string ingress.httpRPC.tls[0].hosts[0]=http-rpc.dev.myriad.systems \
            --set ingress.websocketRPC.enabled=true \
            --set-string ingress.websocketRPC.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set-string ingress.websocketRPC.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
            --set-string ingress.websocketRPC.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
            --set-string ingress.websocketRPC.annotations."nginx\.ingress\.kubernetes\.io/proxy-read-timeout"="3600" \
            --set-string ingress.websocketRPC.annotations."nginx\.ingress\.kubernetes\.io/proxy-send-timeout"="3600" \
            --set-string ingress.websocketRPC.hosts[0].host=ws-rpc.dev.myriad.systems \
            --set-string ingress.websocketRPC.hosts[0].paths[0].path=/ \
            --set-string ingress.websocketRPC.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set-string ingress.websocketRPC.tls[0].secretName=myriad-node-websocket-rpc-tls \
            --set-string ingress.websocketRPC.tls[0].hosts[0]=ws-rpc.dev.myriad.systems \
            --set-string volume.storageClassName=premium-rwo \
            --set-string volume.dataSize=50Gi
          kubectl rollout status statefulset/myriad-node-full1
