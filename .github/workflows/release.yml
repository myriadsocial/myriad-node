name: Release

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'RELEASE'
        required: true
        type: string

concurrency:
  group: release

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.input-check.outputs.release_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: input check
        id: input-check
        shell: bash
        run: |
          RELEASE_INPUT="${{ inputs.release }}"
          RELEASE_NAME=${RELEASE_INPUT##* }

          echo "::set-output name=release_name::$RELEASE_NAME"
      - uses: cardinalby/git-get-release-action@v1
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseName: ${{ steps.input-check.outputs.release_name }}
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.get_release.outputs.id }}

  deploy-release:
    runs-on: ubuntu-20.04
    needs:
      - release
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            NODE_KEY_PRIVATE_1:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_1
            NODE_KEY_PUBLIC_1:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_1
            NODE_KEY_PRIVATE_2:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_2
            NODE_KEY_PUBLIC_2:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_2
            NODE_KEY_PRIVATE_3:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_3
            NODE_KEY_PUBLIC_3:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_3
            NODE_TELEMETRY_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/NODE_TELEMETRY_URL
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-node myriadsocial/myriad-node \
              --install \
              --set-string image.tag=${{ needs.release.outputs.release_name }}
              --set-string config.chain=mainnet \
              --set-string config.nodes[0].name=full1 \
              --set config.nodes[0].bootnode=true \
              --set config.nodes[0].archive=false \
              --set config.nodes[0].validator=false \
              --set-string config.nodes[0].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_1 }} \
              --set-string config.nodes[0].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_1 }} \
              --set-string config.nodes[0].telemetry=true \
              --set-string config.nodes[1].name=full2 \
              --set config.nodes[1].bootnode=true \
              --set config.nodes[1].archive=false \
              --set config.nodes[1].validator=false \
              --set-string config.nodes[1].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_2 }} \
              --set-string config.nodes[1].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_2 }} \
              --set-string config.nodes[1].telemetry=true \
              --set-string config.nodes[2].name=archive1 \
              --set config.nodes[2].bootnode=true \
              --set config.nodes[2].archive=true \
              --set config.nodes[2].validator=false \
              --set-string config.nodes[2].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_3 }} \
              --set-string config.nodes[2].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_3 }} \
              --set-string config.nodes[2].telemetry=true \
              --set-string config.telemetryUrl="${{ steps.secrets.outputs.NODE_TELEMETRY_URL }}" \
              --set services.httpRPC.enabled=true \
              --set services.websocketRPC.enabled=true \
              --set-string volume.storageClassName=premium-rwo \
              --set-string volume.dataSize=50Gi \
              --set-string nodeSelector.pool=blockchain
            kubectl rollout status statefulset/myriad-node-full1
      - name: Sleuth webhook
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.NODE_SLEUTH_WEBHOOK }}
