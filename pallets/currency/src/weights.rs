//! Autogenerated weights for pallet_currency
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-13, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/myriad
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_currency
// --extrinsic=*
// --steps=20
// --repeat=10
// --heap-pages=4096
// --raw
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/currency/src/weights.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_currency.
pub trait WeightInfo {
	fn add_currency() -> Weight;
	fn update_balance(s: u32, ) -> Weight;
	fn transfer(s: u32, ) -> Weight;
}

/// Weights for pallet_currency using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Currency Currency (r:1 w:1)
	// Storage: Currency Currencies (r:1 w:1)
	fn add_currency() -> Weight {
		63_000_000_u64
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Currency Currency (r:1 w:0)
	// Storage: Currency Accounts (r:1 w:1)
	fn update_balance(s: u32, ) -> Weight {
		72_926_000_u64
			// Standard Error: 28_000
			.saturating_add((20_000_u64).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Currency Currency (r:1 w:0)
	// Storage: Currency Accounts (r:2 w:2)
	fn transfer(s: u32, ) -> Weight {
		96_104_000_u64
			// Standard Error: 59_000
			.saturating_add((111_000_u64).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Currency Currency (r:1 w:1)
	// Storage: Currency Currencies (r:1 w:1)
	fn add_currency() -> Weight {
		63_000_000_u64
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: Currency Currency (r:1 w:0)
	// Storage: Currency Accounts (r:1 w:1)
	fn update_balance(s: u32, ) -> Weight {
		72_926_000_u64
			// Standard Error: 28_000
			.saturating_add((20_000_u64).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Currency Currency (r:1 w:0)
	// Storage: Currency Accounts (r:2 w:2)
	fn transfer(s: u32, ) -> Weight {
		96_104_000_u64
			// Standard Error: 59_000
			.saturating_add((111_000_u64).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
