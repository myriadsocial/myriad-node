//! Autogenerated weights for pallet_server
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-29, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/myriad
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_server
// --extrinsic=*
// --steps=20
// --repeat=10
// --heap-pages=4096
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/server/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_server.
pub trait WeightInfo {
	fn register(s: u32, ) -> Weight;
	fn update_name() -> Weight;
	fn update_api_url() -> Weight;
	fn update_web_url() -> Weight;
	fn transfer_owner() -> Weight;
	fn unregister() -> Weight;
}

/// Weights for pallet_server using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Server ServerCount (r:1 w:1)
	// Storage: Server ServerById (r:0 w:1)
	// Storage: Server ServerByOwner (r:0 w:1)
	fn register(_s: u32, ) -> Weight {
		45_509_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn update_name() -> Weight {
		40_900_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn update_api_url() -> Weight {
		40_100_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn update_web_url() -> Weight {
		31_400_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn transfer_owner() -> Weight {
		30_800_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	// Storage: Server ServerCount (r:1 w:1)
	// Storage: Server ServerByOwner (r:0 w:1)
	fn unregister() -> Weight {
		39_700_000_u64
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Server ServerCount (r:1 w:1)
	// Storage: Server ServerById (r:0 w:1)
	// Storage: Server ServerByOwner (r:0 w:1)
	fn register(_s: u32, ) -> Weight {
		45_509_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn update_name() -> Weight {
		40_900_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn update_api_url() -> Weight {
		40_100_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn update_web_url() -> Weight {
		31_400_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	fn transfer_owner() -> Weight {
		30_800_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Server ServerById (r:1 w:1)
	// Storage: Server ServerCount (r:1 w:1)
	// Storage: Server ServerByOwner (r:0 w:1)
	fn unregister() -> Weight {
		39_700_000_u64
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
