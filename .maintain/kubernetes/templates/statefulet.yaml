{{- range .Values.config.nodes }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "myriad-node.fullname" $ }}-{{ .name }}
  labels:
    {{- include "myriad-node.labels" $ | nindent 4 }}
    component: {{ .name }}
    {{- if .validator }}
    part-of: validator
    {{- else }}
    part-of: full-node
    {{- end }}
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ include "myriad-node.fullname" $ }}-{{ .name }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: {{ $.Values.volume.storageClassName }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ $.Values.volume.dataSize }}
  selector:
    matchLabels:
      {{- include "myriad-node.selectorLabels" $ | nindent 6 }}
      component: {{ .name }}
      {{- if .validator }}
      part-of: validator
      {{- else }}
      part-of: full-node
      {{- end }}
  template:
    metadata:
      {{- with $.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "myriad-node.selectorLabels" $ | nindent 8 }}
        component: {{ .name }}
        {{- if .validator }}
        part-of: validator
        {{- else }}
        part-of: full-node
        {{- end }}
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "myriad-node.serviceAccountName" $ }}-{{ .name }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .keys.private }}
      volumes:
        - name: node-key
          secret:
            secretName: {{ include "myriad-node.nodeKeySecretName" $ }}-{{ .name }}
            items:
              - key: private
                path: key
              - key: public
                path: key.pub
      {{- end }}
      containers:
        - name: {{ $.Chart.Name }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: [ "sh" ]
          args:
            - -c
            - exec /usr/local/bin/myriad
              --base-path=/data
              {{- if $.Values.config.chain }}
              --chain={{ $.Values.config.chain }}
              {{- end }}
              {{- if .keys.private }}
              --node-key=$(cat /etc/secrets/node-key/key)
              {{- end }}
              {{- if .name }}
              --name={{ .name }}
              {{- end }}
              {{- if .validator }}
              --validator
              --enable-offchain-indexing=true
              {{- end }}
              --port=30333
              --rpc-cors=all
              --rpc-methods=unsafe
              --rpc-port=9933
              --ws-port=9944
              --unsafe-rpc-external
              --unsafe-ws-external
              --prometheus-port=9615
              --prometheus-external
              --no-telemetry
              {{- $name := .name }}
              {{- range $value := $.Values.config.nodes }}
              {{- if and $value.bootnode (ne $value.name $name ) }}
              --bootnodes=/dns/{{ include "myriad-node.name" $ }}-{{ $value.name }}-0.{{ include "myriad-node.name" $ }}-{{ $value.name }}.{{ $.Release.Namespace }}.svc.cluster.local/tcp/30333/p2p/{{ $value.keys.public }}
              {{- end }}
              {{- end }}
              {{- range $value := $.Values.config.extraBootnodes }}
              --bootnodes={{ $value }}
              {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- if .keys.private }}
            - name: node-key
              mountPath: /etc/secrets/node-key
              readOnly: true
            {{- end }}
          ports:
            - name: p2p
              containerPort: 30333
              protocol: TCP
            - name: http-rpc
              containerPort: 9933
              protocol: TCP
            - name: websocket-rpc
              containerPort: 9944
              protocol: TCP
            - name: metrics
              containerPort: 9615
              protocol: TCP
          startupProbe:
            httpGet:
              path: /health
              port: http-rpc
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: http-rpc
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: http-rpc
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1

---

{{- end }}
