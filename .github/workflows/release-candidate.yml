name: Release-candidate automation

on:
  push:
    branches:
      - release-[0-9]+.[0-9]+.[0-9]+

concurrency:
  group: release-candidate-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest

    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}
      new_tag: ${{ steps.build-info.outputs.new_tag }}
      first_rc: ${{ steps.build-info.outputs.first_rc }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"
          # Get last rc tag if exists, else set it to {version}-rc1
          version=${GITHUB_REF#refs/heads/release-}
          echo "$version"
          echo "::set-output name=version::$version"
          git tag -l
          last_rc=$(git tag -l "$version-rc*" | sort -V | tail -n 1)
          if [ -n "$last_rc" ]; then
            suffix=$(echo "$last_rc" | grep -Eo '[0-9]+$')
            echo $suffix
            ((suffix++))
            echo $suffix
            echo "::set-output name=new_tag::$version-rc$suffix"
            echo "::set-output name=first_rc::false"
          else
            echo "::set-output name=new_tag::$version-rc1"
            echo "::set-output name=first_rc::true"
          fi

  apply-rc-tag:
    runs-on: ubuntu-latest

    needs: compute-build-info

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Apply new tag
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ''
          custom_tag: ${{ needs.compute-build-info.outputs.new_tag }}

  build-and-upload-artifacts:
    runs-on: ubuntu-latest

    needs: apply-rc-tag

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-06-29
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          override: true
          default: true

      - name: Cache rust or cargo project
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: ${{ runner.os }}-rust-cache

      - name: Cargo build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: main
          path: |
            ./target/release/wbuild/myriad-runtime/myriad_runtime.wasm
            ./target/release/myriad

  build-and-publish-docker-image:
    runs-on: ubuntu-latest

    needs: [apply-rc-tag, build-and-upload-artifacts]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-release-candidate
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Binary from Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.apply-rc-tag.outputs.new_tag }}
            ${{ github.repository }}:latest-rc
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest

    needs: [compute-build-info, build-and-publish-docker-image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.STG_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.STG_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: myriad
          location: asia-southeast2-a

      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            NODE_KEY_PRIVATE_VALIDATOR_1:${{ secrets.STG_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_VALIDATOR_1
            NODE_KEY_PUBLIC_VALIDATOR_1:${{ secrets.STG_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_VALIDATOR_1
            NODE_KEY_PRIVATE_VALIDATOR_2:${{ secrets.STG_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_VALIDATOR_2
            NODE_KEY_PUBLIC_VALIDATOR_2:${{ secrets.STG_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_VALIDATOR_2
            NODE_KEY_PRIVATE_1:${{ secrets.STG_GCP_PROJECT_ID }}/NODE_KEY_PRIVATE_1
            NODE_KEY_PUBLIC_1:${{ secrets.STG_GCP_PROJECT_ID }}/NODE_KEY_PUBLIC_1

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Deploy
        run: |
          helm upgrade myriad-node .maintain/kubernetes \
            --install \
            --set-string image.tag=${{ needs.compute-build-info.outputs.new_tag }} \
            --set-string config.chain=staging \
            --set-string nodes[0].name=validator1 \
            --set nodes[0].bootnode=true \
            --set nodes[0].validator=true \
            --set-string nodes[0].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_VALIDATOR_1 }} \
            --set-string nodes[0].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_VALIDATOR_1 }} \
            --set-string nodes[1].name=validator2 \
            --set nodes[1].bootnode=true \
            --set nodes[1].validator=true \
            --set-string nodes[1].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_VALIDATOR_2 }} \
            --set-string nodes[1].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_VALIDATOR_2 }} \
            --set-string nodes[2].name=node1 \
            --set nodes[2].bootnode=false \
            --set nodes[2].validator=false \
            --set-string nodes[2].keys.private=${{ steps.secrets.outputs.NODE_KEY_PRIVATE_1 }} \
            --set-string nodes[2].keys.public=${{ steps.secrets.outputs.NODE_KEY_PUBLIC_1 }} \
            --set-string volume.storageClassName=premium-rwo \
            --set-string volume.dataSize=50Gi
          kubectl rollout status statefulset/myriad-node-validator1
